# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="%APPLICATION_SECRET%"

# The application languages
# ~~~~~
application.langs="en"

# We do not additional security checks for the POST requests. DO NOT DISABLE THIS ON PRODUCTION
play.filters {
  enabled = null
}

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Your standard settings for the db
db.default {
  driver=org.postgresql.Driver
  url="jdbc:postgresql://localhost:5432/dblargedataloader"
  username="dblargedataloader"
  password="verysecret"

  # https://stackoverflow.com/questions/4365621/what-is-jndi-what-is-its-basic-use-when-is-it-used/4365766
  jndiName=DefaultDS
}

# defined in the persistence.xml. It is shame that we cannot define such things in this file (or I do not know how)
jpa.default=defaultPersistenceUnit

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# For this demo, we do not need this at all
evolutionplugin=disabled

# Job queue sized to HikariCP connection pool
# By default HikariCP uses 10 connections per pool, so we have 9 to be used by app, and to leave one for other possibilities
# Given that our app will not have 'other possibilities' then this could be 10, but I left it at 9
db-task {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor {
    fixed-pool-size = 9
  }
}

# I was playing with the extra thread pool. It should work with one thread only.
# If it hangs and you need to increase it, then you are not optimizing threads correctly
backend-task {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor {
    fixed-pool-size = 1
  }
}